
NodeDown_critical = up{component="node-exporter",job="kubernetes-monitoring-endpoints"} == 0
NodeCPUUsage_warning = (100 - (avg by (instance) (irate(node_cpu{component="node-exporter",mode="idle"}[5m])) * 100)) > 75
NodeCPUUsage_critical = (100 - (avg by (instance) (irate(node_cpu{component="node-exporter",mode="idle"}[5m])) * 100)) > 95
NodeLoadAverage5_warning = ((node_load5 / count without (cpu, mode) (node_cpu{mode="system"})) > 4)
NodeSwapUsage_warning = (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100) > 75
NodeMemoryUsage_warning = (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached)/(node_memory_MemTotal)*100)) > 75
NodeMemoryUsage_critical = (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached)/(node_memory_MemTotal)*100)) > 95
NodeLowRootDisk_warning = ((node_filesystem_size{mountpoint="/"} - node_filesystem_free{mountpoint="/"} ) / node_filesystem_size{mountpoint="/"} * 100) > 75
NodeLowRootDisk_critical = ((node_filesystem_size{mountpoint="/"} - node_filesystem_free{mountpoint="/"} ) / node_filesystem_size{mountpoint="/"} * 100) > 95

ApiserverDown_critical =  up{job="kubernetes-apiservers"} == 0
APIServerLatencyHigh_warning = rate(apiserver_request_count{code=~"^(?:5..)$"}[5m]) / rate(apiserver_request_count[5m]) * 100 > 5
APIServerErrorsHigh_warning = 	avg(apiserver_request_latencies_sum / apiserver_request_latencies_count) / 1000000 > 2000

K8SNodeNotReady_warning =  kube_node_status_condition{condition="Ready",status="true"} == 0
K8SKubeletDown_critical = up{job="kubernetes-nodes"} == 0
K8SKubeletTooManyPods_warning = kubelet_running_pod_count > 100

ETCD_Down_critical = up{job="etcd"} == 0
ETCD_NoLeader_critical = 	etcd_server_has_leader{job="etcd"} == 0
ETCD_InsufficientMembers_critical = count(up{job="etcd"} == 0) > (count(up{job="etcd"}) / 2 - 1)
ETCD_HighNumberOfLeaderChanges_critical = increase(etcd_server_leader_changes_seen_total{job="etcd"}[1h]) > 3

PodFrequentlyRestarting_warning = increase(kube_pod_container_status_restarts_total[1h]) > 5

PrometheusConfigReloadFailed_warning = 	Reloading Promehteus' configuration failed
PrometheusErrorSendingAlerts_warning = Errors while sending alerts

AlertmanagerFailedReload_warning = alertmanager_config_last_reload_successful == 0

ZCPMonitoringDown_warning = 	up{component=~"alertmanager|blackbox-exporter|grafana|kube-state-metrics|prometheus"} == 0
